{
  "fileName": "useContext.jsx",
  "filePath": "gist/useContext.jsx",
  "url": "https://github.com/ldarren/rhook-doc/gist/useContext.jsx",
  "summary": "This code demonstrates how to use the `useContext` hook in React to manage the theme of a web application. The code defines a `ThemeContext` object using the `createContext` method from the `React` library. This context object is then used to provide a theme value to two components: `ClassContextComponent` and `FunctionContextComponent`.\n\nThe `ClassContextComponent` is a class-based component that uses the `ThemeContext.Consumer` component to consume the theme value from the `ThemeContext` object. The `FunctionContextComponent` is a functional component that uses the `useContext` hook to consume the theme value from the `ThemeContext` object.\n\nThe `App` component is the main component that renders the `ClassContextComponent` and `FunctionContextComponent` components. It also provides the `darkTheme` value to the `ThemeContext` object using the `ThemeContext.Provider` component. The `toggleTheme` function is used to toggle the `darkTheme` value between `true` and `false` when the `Toggle Theme` button is clicked.\n\nThe `themeStyles` function is used to define the styles for the components based on the `darkTheme` value. If `darkTheme` is `true`, the background color and text color are set to `#333` and `#ccc` respectively. If `darkTheme` is `false`, the background color and text color are set to `#ccc` and `#333` respectively.\n\nThis code can be used as a starting point for managing the theme of a web application in React. By defining a `ThemeContext` object and providing it to child components using the `ThemeContext.Provider` component, the theme can be easily managed and updated throughout the application. The `useContext` hook can be used in functional components to consume the theme value, while the `ThemeContext.Consumer` component can be used in class-based components to consume the theme value. \n\nExample usage:\n\n```jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n```\n\n```jsx\nimport React from 'react';\nimport { ThemeContext } from './ThemeContext';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <ThemeContext.Consumer>\n        {(darkTheme) => (\n          <header style={{ backgroundColor: darkTheme ? '#333' : '#ccc' }}>\n            <h1 style={{ color: darkTheme ? '#ccc' : '#333' }}>My App</h1>\n          </header>\n        )}\n      </ThemeContext.Consumer>\n    );\n  }\n}\n\nexport default Header;\n```\n\n```jsx\nimport React, { useContext } from 'react';\nimport { ThemeContext } from './ThemeContext';\n\nfunction Button() {\n  const darkTheme = useContext(ThemeContext);\n\n  return (\n    <button\n      style={{\n        backgroundColor: darkTheme ? '#333' : '#ccc',\n        color: darkTheme ? '#ccc' : '#333',\n      }}\n    >\n      Click me\n    </button>\n  );\n}\n\nexport default Button;\n```",
  "questions": "1. What is the purpose of the `ThemeContext` and `themeStyles` variables?\n    \n    `ThemeContext` is a React context used to pass down the current theme (dark or light) to child components. `themeStyles` is a function that returns an object with CSS styles based on the current theme.\n\n2. What is the difference between `ClassContextComponent` and `FunctionContextComponent`?\n    \n    `ClassContextComponent` is a class component that consumes the `ThemeContext` using the `Consumer` component. `FunctionContextComponent` is a function component that uses the `useContext` hook to consume the `ThemeContext`.\n\n3. How does the `toggleTheme` function work?\n    \n    `toggleTheme` is a function that toggles the `darkTheme` state between `true` and `false` using the `setDarkTheme` function from the `useState` hook. It takes the previous value of `darkTheme` as an argument and returns the opposite value."
}